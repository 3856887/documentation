(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{341:function(t,e,s){t.exports=s.p+"assets/img/Pterodactyl_Create_New_Egg_Process_Management.516b5b6f.png"},353:function(t,e,s){t.exports=s.p+"assets/img/Pterodactyl_Create_New_Egg_Select.5a2867ee.png"},354:function(t,e,s){t.exports=s.p+"assets/img/Pterodactyl_Create_New_Egg_Copy_Settings_From.e3102cdd.png"},355:function(t,e,s){t.exports=s.p+"assets/img/Pterodactyl_Create_New_Egg_Variables.3962b264.png"},356:function(t,e,s){t.exports=s.p+"assets/img/Pterodactyl_Create_New_Egg_Startup.b6e22637.png"},379:function(t,e,s){"use strict";s.r(e);var a=s(48),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"创建自定义预设"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建自定义预设"}},[t._v("#")]),t._v(" 创建自定义预设")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),a("p",[t._v("您不应编辑面板随附的现有预设。我们每次对这些预设的更新，在你更新数据库时会覆盖面板的原有预设，也就是说你将丢失这些所有改动的内容。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#创建新的预设"}},[t._v("创建新的预设")])]),a("li",[a("a",{attrs:{href:"#进程管理识别"}},[t._v("进程管理识别")]),a("ul",[a("li",[a("a",{attrs:{href:"#关机指令"}},[t._v("关机指令")])]),a("li",[a("a",{attrs:{href:"#日志存储"}},[t._v("日志存储")])]),a("li",[a("a",{attrs:{href:"#配置文件"}},[t._v("配置文件")])]),a("li",[a("a",{attrs:{href:"#启动配置"}},[t._v("启动配置")])])])]),a("li",[a("a",{attrs:{href:"#复制设置"}},[t._v("复制设置")])]),a("li",[a("a",{attrs:{href:"#预设的变量"}},[t._v("预设的变量")])]),a("li",[a("a",{attrs:{href:"#翼龙面板默认变量列表"}},[t._v("翼龙面板默认变量列表")])])])]),a("p"),t._v(" "),a("p",[t._v("您需要做的第一件事是创建一个新的预设组(类似文件夹)。名称和描述就不言而喻了。"),a("code",[t._v("预设组名称")]),t._v(" "),a("em",[t._v("需要确保唯一性")]),t._v(" ，不被其他任何预设组使用，并且只能包含字母、数字、下划线和破折号(中文也是可以的)。这是守护进程存储预设的预设组名称。")]),t._v(" "),a("p",[t._v("预设的默认启动命令也是必需的，但是可以根据变量进行动态更改。")]),t._v(" "),a("h2",{attrs:{id:"创建新的预设"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建新的预设"}},[t._v("#")]),t._v(" 创建新的预设")]),t._v(" "),a("p",[t._v("创建完预设组后, 点击页面右下角的 "),a("code",[t._v("新预设")]),t._v(" 按钮。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(353),alt:""}})]),t._v(" "),a("p",[t._v("大多数配置都将在随后打开的这个预设设置页面中进行. 你要做的第一件事情就是从 "),a("code",[t._v("所属预设组")]),t._v(" 下拉框中选择你的预设属于哪个预设租。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(341),alt:""}})]),t._v(" "),a("p",[t._v("随后为你的预设起一个名字并填写在 "),a("code",[t._v("预设名")]),t._v(" 中, 在这个样例中我使用了 "),a("code",[t._v("Widget")]),t._v(" 这个名字. 你还需要提供一个有效的docker镜像和启动命令 (启动命令在具体的服务器创建后可以单独针对此服进行再次编辑)。")]),t._v(" "),a("p",[a("em",[t._v("Docker images 必须是专门设计用于翼龙面板的那些。")]),t._v(" 你可以在我们的"),a("RouterLink",{attrs:{to:"/community/config/eggs/creating_a_custom_image.html"}},[t._v("创建docker镜像")]),t._v(" 指南中阅读更多相关信息。")],1),t._v(" "),a("h2",{attrs:{id:"进程管理识别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理识别"}},[t._v("#")]),t._v(" 进程管理识别")]),t._v(" "),a("p",[t._v("这是配置界面中最重要的一步, 这些信息能让进程知道如何启动并管理这个游戏预设。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(341),alt:""}})]),t._v(" "),a("p",[t._v("第一个空是 "),a("code",[t._v("复制设置自")]),t._v("，默认为 "),a("code",[t._v("无")]),t._v("，如果你已经配置好了一个类似的预设，想要快速配置这些信息就可以点击下拉框并选中。")]),t._v(" "),a("h3",{attrs:{id:"关机指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关机指令"}},[t._v("#")]),t._v(" 关机指令")]),t._v(" "),a("p",[t._v("下一个空是 "),a("code",[t._v("关机指令")]),t._v("，这个命令将用于安全的停止服务器，例如在我的世界里，通常使用 "),a("code",[t._v("stop")]),t._v(" 命令来关闭服务器。当然也有一些游戏没有相关的管理员命令，例如幻兽帕鲁(也许未来会更新加入)。这种情况直接填入 "),a("code",[t._v("^C")]),t._v(" 让守护进程执行一个 "),a("code",[t._v("SIGINT")]),t._v("来结束进程。")]),t._v(" "),a("h3",{attrs:{id:"日志存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志存储"}},[t._v("#")]),t._v(" 日志存储")]),t._v(" "),a("p",[t._v("现在日志完全由守护进程处理，并利用docker从服务器输出完整的日志。设置案例如下。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),a("p",[t._v("接下来的 "),a("code",[t._v("配置文件")]),t._v(" 是最重要的一个空. 在服务器启动之前,守护进程将会落实这些配置以确保服务器能够正确的应用。")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"server.properties"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parser"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"properties"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"find"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"server-ip"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"enable-query"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"server-port"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{server.build.default.port}}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query.port"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{server.build.default.port}}"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在这个例子中, 我们让守护进程从 "),a("code",[t._v("/home/container")]),t._v(" 路径读取 "),a("code",[t._v("server.properties")]),t._v(" 这个文件. 在这个代码块里, 我们定义了一个解析器("),a("code",[t._v("parser")]),t._v(")，在这里是 "),a("code",[t._v("properties")]),t._v(" 但以下也是 "),a("a",{attrs:{href:"https://github.com/pterodactyl-china/wings/blob/develop/parser/parser.go#L25-L30",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效的解析器"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("file")]),t._v(" — 此解析器基于匹配行的开头，而不是像其他五个解析器一样基于特定属性。如果可能的话，请避免使用此解析器。")]),t._v(" "),a("li",[a("code",[t._v("yaml")]),t._v(" (支持 "),a("code",[t._v("*")]),t._v(" 符号)")]),t._v(" "),a("li",[a("code",[t._v("properties")])]),t._v(" "),a("li",[a("code",[t._v("ini")])]),t._v(" "),a("li",[a("code",[t._v("json")]),t._v(" (支持 "),a("code",[t._v("*")]),t._v(" 符号)")]),t._v(" "),a("li",[a("code",[t._v("xml")])])]),t._v(" "),a("p",[t._v("定义了文件类型之后, 接下来开始编辑 "),a("code",[t._v("find")]),t._v(" 代码块, 这将会让守护进程知道哪些特殊的元素需要被查找并替换. 在这个例子里, 可以看到代码块里填了4个 "),a("code",[t._v("server.properties")]),t._v(" 文件中元素,这将会查找并自动替换这些元素为我们想要的值. 你可以使用精确的值，也可以从 "),a("code",[t._v("server.json")]),t._v(" 文件中定义特殊的设置. 在本例中，我们将默认服务器端口指定为 "),a("code",[t._v("server-port")]),t._v(" 和 "),a("code",[t._v("query.port")]),t._v(". "),a("strong",[t._v("这些占位符区分大小写, 并且不能含有空格.")])]),t._v(" "),a("p",[t._v("你可以在这里同时监听多个文件, 守护进程将在启动服务器之前检查并处理它们. 当文件是 "),a("code",[t._v("yaml")]),t._v(" 或 "),a("code",[t._v("json")]),t._v(" 类型时，你可以使用更高级的元素搜索方式.")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"config.yml"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parser"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yaml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"find"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"listeners[0].query_enabled"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"listeners[0].query_port"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{server.build.default.port}}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"listeners[0].host"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0:{{server.build.default.port}}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"servers.*.address"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"127.0.0.1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{config.docker.interface}}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"localhost"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{{config.docker.interface}}"')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在这个例子里, 我们定义了 "),a("code",[t._v("config.yml")]),t._v(" 文件，它的类型时 "),a("code",[t._v("yaml")]),t._v(". 前三个元素只是简单的设定了端口和ip. 最后一个 "),a("code",[t._v("servers.*.address")]),t._v(" 使用了 * 来匹配 "),a("code",[t._v("servers")]),t._v(" 中的任意项目, 并找到当中的每一个 "),a("code",[t._v("address")]),t._v(" 元素.")]),t._v(" "),a("div",{pre:!0},[a("p",[t._v("文件配置中有一个高级用法可以只用一行代码就能做到匹配并替换多个元素. 在本例中, 我们正在寻找 "),a("code",[t._v("127.0.0.1")]),t._v(" 或 "),a("code",[t._v("localhost")]),t._v(" 并且替换他们为docker中接口配置 "),a("code",[t._v("{{config.docker.interface}}")]),t._v(".")])]),a("h3",{attrs:{id:"启动配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动配置"}},[t._v("#")]),t._v(" 启动配置")]),t._v(" "),a("p",[t._v("最后一个模块是 "),a("code",[t._v("启动配置")]),t._v("。这将用于判定服务器是否处于运行（running）状态.")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"done"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('")! For help, type "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上面这个例子, 我们定义了 "),a("code",[t._v("done")]),t._v(" 作为一整行, 或者是代表服务器已完成启动并且已经准备好让玩家进入的其他输出(其中一部分即可). 当守护进程检测到这些输出时, 它会标记服务器已经成功启动了  "),a("code",[t._v("ON")]),t._v(" 而不是启动中 "),a("code",[t._v("STARTING")]),t._v(".")]),t._v(" "),a("p",[t._v("基本预设配置到此结束,快去实践看看吧。")]),t._v(" "),a("h2",{attrs:{id:"复制设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制设置"}},[t._v("#")]),t._v(" 复制设置")]),t._v(" "),a("p",[t._v("如上所示, 添加新选项时，有一个独特的 "),a("code",[t._v("复制设置自")]),t._v(" 下拉列表。顾名思义，这让你能够从不同的选项复制上面定义的设置。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(354),alt:""}})]),t._v(" "),a("p",[t._v("在面板中，我们使用这个功能来复制在类似服务选项之间保持不变的设置，例如许多《我的世界》服务器当中的配置。")]),t._v(" "),a("p",[t._v("例如 "),a("code",[t._v("Sponge (SpongeVanilla)")]),t._v(" 预设配置.")]),t._v(" "),a("p",[t._v("正如你所看到的，它被告知从 "),a("code",[t._v("Vanilla Minecraft")]),t._v(". 复制设置。这意味着任何留空将从指定的父级继承。然后我们定义一个特定的 "),a("code",[t._v("userInteraction")]),t._v(" 元素，它与Sponge与Vanilla预设相比会有这个特定元素的区别，但别的一样。")]),t._v(" "),a("p",[a("em",[t._v("请注意，"),a("code",[t._v("复制设置自")]),t._v(" 不支持嵌套复制，您只能从单个父项复制。并且被用于复制的预设 "),a("strong",[t._v("其本身不能是复制其他预设的。.")])])]),t._v(" "),a("h2",{attrs:{id:"预设的变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预设的变量"}},[t._v("#")]),t._v(" 预设的变量")]),t._v(" "),a("p",[t._v("变量的一大优点是能够定义用户/管理员可以定义的特定变量，在不用让用户修改启动命令的情况下调整不同的设置。创建新变量或编辑现有的变量，请访问您创建的服务器预设界面，然后单击页面顶部的 "),a("code",[t._v("变量")]),t._v(" 按钮。我们可以在一些例子里看看可以创建的变量示例。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(355),alt:""}})]),t._v(" "),a("div",{pre:!0},[a("p",[t._v("名称和描述相当直观，所以我将跳过这部分，直接讲解"),a("code",[t._v("环境变量")]),t._v("框。这应该是一个只带有下划线、字母、数字的名称，并且应该是大写。这将是环境变量的名称，可以在启动命令中通过 "),a("code",[t._v("{{WOOZLE_WOO}}")]),t._v(" 访问，在文件修改中通过 "),a("code",[t._v("{{env.WOOZLE_WOO}}")]),t._v(" 访问，或者在任何shell脚本中通过 "),a("code",[t._v("${WOOZLE_WOO}")]),t._v(" 访问（它会在环境中传递）。在这个示例中，我们还为这个环境变量定义了一个默认值，但并不是必须这样做。")])]),a("p",[t._v("下一部分是"),a("code",[t._v("权限")]),t._v("，这是一个下拉菜单，有两个选项："),a("code",[t._v("用户可以查看")]),t._v("和"),a("code",[t._v("用户可以编辑")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("用户可以查看")]),t._v(" — 允许用户在前端查看字段以及该变量的赋值。他们将能够在他们的启动命令中看到它被替换。")]),t._v(" "),a("li",[a("code",[t._v("用户可以编辑")]),t._v(" — 允许用户编辑变量的值，例如运行Minecraft预设，他们将可以修改 "),a("code",[t._v("server.jar")]),t._v(" 文件的名称。")])]),t._v(" "),a("p",[t._v("在这里你应该小心，即使你没有分配任何权限，也并不意味着该值将被隐藏。狡猾的用户仍然能够在他们的服务器上获取环境。在大多数情况下，这只是对用户隐藏它，然后在Dockerfile中使用它来执行操作，因此用户无需看到它。")]),t._v(" "),a("p",[t._v("最后，你需要定义一些输入规则来验证该值。在这个例子中，我们使用 "),a("code",[t._v("required|string|between:1,10")]),t._v("，这意味着字段是 "),a("code",[t._v("必需")]),t._v("，必须是 "),a("code",[t._v("字符串")]),t._v("，并且长度必须在"),a("code",[t._v("1")]),t._v("到"),a("code",[t._v("10")]),t._v("个字符之间。你可以在Laravel网站上找到所有可用的验证规则。你也可以使用 "),a("code",[t._v("regex:")]),t._v(" 规则标志进行基于 ReGEX 的验证。例如，"),a("a",{attrs:{href:"https://regex101.com/r/k4oEOn/1",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("required|regex:/^([\\w\\d._-]+)(\\.jar)$/")]),a("OutboundLink")],1),t._v("将要求字段，并将匹配正则表达式为任何字母或数字("),a("code",[t._v("\\w\\d")]),t._v(")，包括下划线("),a("code",[t._v("_")]),t._v(")，句点("),a("code",[t._v(".")]),t._v(")和破折号("),a("code",[t._v("-")]),t._v(")，以"),a("code",[t._v(".jar")]),t._v("结尾。")]),t._v(" "),a("p",[t._v("然后，当在Admin CP和前端管理服务器的启动时，它们将可见。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(356),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"翼龙面板默认变量列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#翼龙面板默认变量列表"}},[t._v("#")]),t._v(" 翼龙面板默认变量列表")]),t._v(" "),a("p",[t._v("默认变量对所有预设都是可访问的，不必单独创建。它们可以在egg启动、安装脚本或配置文件解析器中使用。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量名")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TZ")]),t._v(" "),a("td",[t._v("时区")]),t._v(" "),a("td",[a("code",[t._v("Etc/UTC")])])]),t._v(" "),a("tr",[a("td",[t._v("STARTUP")]),t._v(" "),a("td",[t._v("预设的启动命令")]),t._v(" "),a("td",[a("code",[t._v("java -Xms128M -Xmx"+t._s(t.SERVER_MEMORY)+"M -jar "+t._s(t.SERVER_JARFILE))])])]),t._v(" "),a("tr",[a("td",[t._v("SERVER_MEMORY")]),t._v(" "),a("td",[t._v("服务器的可用内存(MB)")]),t._v(" "),a("td",[a("code",[t._v("512")])])]),t._v(" "),a("tr",[a("td",[t._v("SERVER_IP")]),t._v(" "),a("td",[t._v("服务器的默认ip")]),t._v(" "),a("td",[a("code",[t._v("127.0.0.1")])])]),t._v(" "),a("tr",[a("td",[t._v("SERVER_PORT")]),t._v(" "),a("td",[t._v("服务器的首选端口")]),t._v(" "),a("td",[a("code",[t._v("27015")])])]),t._v(" "),a("tr",[a("td",[t._v("P_SERVER_LOCATION")]),t._v(" "),a("td",[t._v("服务器的位置")]),t._v(" "),a("td",[a("code",[t._v("Example City")])])]),t._v(" "),a("tr",[a("td",[t._v("P_SERVER_UUID")]),t._v(" "),a("td",[t._v("服务器的UUID")]),t._v(" "),a("td",[a("code",[t._v("539fdca8-4a08-4551-a8d2-8ee5475b50d9")])])]),t._v(" "),a("tr",[a("td",[t._v("P_SERVER_ALLOCATION_LIMIT")]),t._v(" "),a("td",[t._v("服务器分配的端口数")]),t._v(" "),a("td",[a("code",[t._v("0")])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);