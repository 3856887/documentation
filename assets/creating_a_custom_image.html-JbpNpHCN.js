import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as l,a as e,e as n,b as s,d as t}from"./app-tFsE3khQ.js";const c={},d=e("h1",{id:"creating-a-custom-docker-image",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-custom-docker-image"},[e("span",null,"Creating a Custom Docker Image")])],-1),p={class:"hint-container warning"},h=e("p",{class:"hint-container-title"},"注意",-1),u={href:"https://github.com/pterodactyl/images/tree/java",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"core:java",-1),g={href:"https://docker.io/",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"creating-the-dockerfile",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-the-dockerfile"},[e("span",null,"Creating the Dockerfile")])],-1),b={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"Dockerfile",-1),_={href:"https://alpinelinux.org",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ----------------------------------</span>
<span class="token comment"># Pterodactyl Core Dockerfile</span>
<span class="token comment"># Environment: Java</span>
<span class="token comment"># Minimum Panel Version: 0.6.0</span>
<span class="token comment"># ----------------------------------</span>
FROM openjdk:8-jdk-alpine

MAINTAINER Pterodactyl Software, <span class="token operator">&lt;</span>support@pterodactyl.io<span class="token operator">&gt;</span>

RUN apk <span class="token function">add</span> --no-cache <span class="token parameter variable">--update</span> <span class="token function">curl</span> ca-certificates openssl <span class="token function">git</span> <span class="token function">tar</span> <span class="token function">bash</span> sqlite fontconfig <span class="token punctuation">\\</span>
    <span class="token operator">&amp;&amp;</span> adduser --disabled-password <span class="token parameter variable">--home</span> /home/container container

<span class="token environment constant">USER</span> container
ENV  <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>container <span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home/container

WORKDIR /home/container

COPY ./entrypoint.sh /entrypoint.sh

CMD <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span>, <span class="token string">&quot;/entrypoint.sh&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=e("code",null,"Dockerfile",-1),w={href:"https://docs.docker.com/engine/reference/builder/#from",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"FROM",-1),T=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`FROM openjdk:8-jdk-alpine
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),E={href:"https://github.com/docker-library/openjdk",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"openjdk:8-jdk-alpine",-1),x=e("h2",{id:"installing-dependencies",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#installing-dependencies"},[e("span",null,"Installing Dependencies")])],-1),C=e("code",null,"apk",-1),I=e("code",null,"--no-cache",-1),M={href:"https://docs.docker.com/engine/reference/builder/#run",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"RUN",-1),A=t(`<h2 id="creating-a-container-user" tabindex="-1"><a class="header-anchor" href="#creating-a-container-user"><span>Creating a Container User</span></a></h2><p>Within this <code>RUN</code> block, you&#39;ll notice the <code>useradd</code> command.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>adduser <span class="token parameter variable">-D</span> <span class="token parameter variable">-h</span> /home/container container
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>All Pterodactyl containers must have a user named <code>container</code>, and the user home <strong>must</strong> be <code>/home/container</code>.</p></div>`,4),O={href:"https://docs.docker.com/engine/reference/builder/#user",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"USER",-1),j={href:"https://docs.docker.com/engine/reference/builder/#env",target:"_blank",rel:"noopener noreferrer"},U=e("code",null,"ENV",-1),N=e("h2",{id:"work-directory-entrypoint",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#work-directory-entrypoint"},[e("span",null,"Work Directory & Entrypoint")])],-1),V={href:"https://docs.docker.com/engine/reference/builder/#workdir",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"WORKDIR",-1),q=e("code",null,"WORKDIR",-1),L=e("code",null,"/home/container",-1),Y={href:"https://docs.docker.com/engine/reference/builder/#entrypoint",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"ENTRYPOINT",-1),W={href:"https://docs.docker.com/engine/reference/builder/#copy",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"COPY",-1),X={href:"https://docs.docker.com/engine/reference/builder/#cmd",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"CMD",-1),z=e("code",null,"CMD",-1),B=e("code",null,"entrypoint.sh",-1),G=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>COPY ./entrypoint.sh /entrypoint.sh
CMD <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span>, <span class="token string">&quot;/entrypoint.sh&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entrypoint-script" tabindex="-1"><a class="header-anchor" href="#entrypoint-script"><span>Entrypoint Script</span></a></h2><p>In order to complete this <code>Dockerfile</code>, we will need an <code>entrypoint.sh</code> file which tells Docker how to run this specific server type.</p><p>These entrypoint files are actually fairly abstracted, and the Daemon will pass in the start command as an environment variable before processing it and then executing the command.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">cd</span> /home/container

<span class="token comment"># Output Current Java Version</span>
<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token comment">## only really needed to show what version is being used. Should be changed for different applications</span>

<span class="token comment"># Replace Startup Variables</span>
<span class="token assign-left variable">MODIFIED_STARTUP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">$(</span>echo $<span class="token punctuation">{</span>STARTUP<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/{{/\${/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/}}/}/g&#39;</span><span class="token punctuation">)</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;:/home/container$ <span class="token variable">\${MODIFIED_STARTUP}</span>&quot;</span>

<span class="token comment"># Run the Server</span>
<span class="token variable">\${MODIFIED_STARTUP}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second command, <code>cd /home/container</code>, simply ensures we are in the correct directory when running the rest of the commands. We then follow that up with <code>java -version</code> to output this information to end-users, but that is not necessary.</p><h2 id="modifying-the-startup-command" tabindex="-1"><a class="header-anchor" href="#modifying-the-startup-command"><span>Modifying the Startup Command</span></a></h2><p>The most significant part of this file is the <code>MODIFIED_STARTUP</code> environment variable. What we are doing in this case is parsing the environment <code>STARTUP</code> that is passed into the container by the Daemon. In most cases, this variable looks something like the example below:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">STARTUP</span><span class="token operator">=</span><span class="token string">&quot;java -Xms128M -Xmx{{SERVER_MEMORY}}M -jar {{SERVER_JARFILE}}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),K=e("div",null,[e("p",null,[n("You'll notice some placeholders there, specifically "),e("code",{"v-pre":""},"{{SERVER_MEMORY}}"),n(" and "),e("code",{"v-pre":""},"{{SERVER_JARFILE}}"),n(". These both refer to other environment variables being passed in, and they look something like the example below.")])],-1),Z=t('<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">SERVER_MEMORY</span><span class="token operator">=</span><span class="token number">1024</span>\n<span class="token assign-left variable">SERVER_JARFILE</span><span class="token operator">=</span>server.jar\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>There are a host of different environment variables, and they change depending on the specific service option configuration. However, that is not necessarily anything to worry about here.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">MODIFIED_STARTUP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">eval</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">$(</span>echo $<span class="token punctuation">{</span>STARTUP<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/{{/${/g&#39;</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/}}/}/g&#39;</span><span class="token punctuation">)</span><span class="token variable">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',3),Q=e("div",null,[e("p",null,[n("The command above simply evaluates the "),e("code",{"v-pre":""},"STARTUP"),n(" environment variable, and then replaces anything surrounded in curly braces "),e("code",{"v-pre":""},"{{EXAMPLE}}"),n(" with a matching environment variable (such as "),e("code",{"v-pre":""},"EXAMPLE"),n("). Thus, our "),e("code",{"v-pre":""},"STARTUP"),n(" command:")])],-1),ee=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Xms128M</span> -Xmx<span class="token punctuation">{</span><span class="token punctuation">{</span>SERVER_MEMORY<span class="token punctuation">}</span><span class="token punctuation">}</span>M <span class="token parameter variable">-jar</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>SERVER_JARFILE<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Becomes:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Xms128M</span> <span class="token parameter variable">-Xmx1024M</span> <span class="token parameter variable">-jar</span> server.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="run-the-command" tabindex="-1"><a class="header-anchor" href="#run-the-command"><span>Run the Command</span></a></h2><p>The last step is to run this modified startup command, which is done with the line <code>\${MODIFIED_STARTUP}</code>.</p><h3 id="note" tabindex="-1"><a class="header-anchor" href="#note"><span>Note</span></a></h3><p>Sometimes you may need to change the permissions of the <code>entrypoint.sh</code> file, on linux you can do this by executing <code>chmod +x entrypoint.sh</code> in the directory where the file is.</p>`,7);function ne(ae,se){const a=i("ExternalLinkIcon");return r(),l("div",null,[d,e("div",p,[h,e("p",null,[n("This tutorial uses examples from our "),e("a",u,[m,s(a)]),n(" docker image, which can be found on GitHub. This tutorial also assumes some knowledge of "),e("a",g,[n("Docker"),s(a)]),n(", we suggest reading up if this all looks foreign to you.")])]),v,e("p",null,[n("The most important part of this process is to create the "),e("a",b,[k,s(a)]),n(" that will be used by the Daemon. Due to heavy restrictions on server containers, you must setup this file in a specific manner.")]),e("p",null,[n("We try to make use of "),e("a",_,[n("Alpine Linux"),s(a)]),n(" as much as possible for our images in order to keep their size down.")]),f,e("p",null,[n("Lets walk through the "),y,n(" above. The first thing you'll notice is the "),e("a",w,[R,s(a)]),n(" declaration.")]),T,e("p",null,[n("In this case, we are using "),e("a",E,[D,s(a)]),n(" which provides us with Java 8.")]),x,e("p",null,[n("The next thing we do is install the dependencies we will need using Alpine's package manager: "),C,n(". You'll notice some specific flags that keep the container small, including "),I,n(", as well as everything being contained in a single "),e("a",M,[S,s(a)]),n(" block.")]),A,e("p",null,[n("After we create that user, we then define the default container "),e("a",O,[P,s(a)]),n(" as well as a few "),e("a",j,[U,s(a)]),n(" settings to be applied to things running within the container.")]),N,e("p",null,[n("One of the last things we do is define a "),e("a",V,[F,s(a)]),n(" which is where everything else will be executed. The "),q,n(" must be set the "),L,n(".")]),e("p",null,[n("Finally, we need to copy our "),e("a",Y,[J,s(a)]),n(" script into the docker image root. This is done using "),e("a",W,[$,s(a)]),n(", after which we define the command to be used when the container is started using "),e("a",X,[H,s(a)]),n(". The "),z,n(" line should always point to the "),B,n(" file.")]),G,K,Z,Q,ee])}const ie=o(c,[["render",ne],["__file","creating_a_custom_image.html.vue"]]),re=JSON.parse('{"path":"/community/config/eggs/creating_a_custom_image.html","title":"Creating a Custom Docker Image","lang":"zh-CN","frontmatter":{"description":"Creating a Custom Docker Image 注意 This tutorial uses examples from our core:java docker image, which can be found on GitHub. This tutorial also assumes some knowledge of Docker,...","head":[["meta",{"property":"og:url","content":"https://pterodactyl.top/community/config/eggs/creating_a_custom_image.html"}],["meta",{"property":"og:site_name","content":"Pterodactyl-China"}],["meta",{"property":"og:title","content":"Creating a Custom Docker Image"}],["meta",{"property":"og:description","content":"Creating a Custom Docker Image 注意 This tutorial uses examples from our core:java docker image, which can be found on GitHub. This tutorial also assumes some knowledge of Docker,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-17T00:57:54.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-17T00:57:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creating a Custom Docker Image\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-17T00:57:54.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Creating the Dockerfile","slug":"creating-the-dockerfile","link":"#creating-the-dockerfile","children":[]},{"level":2,"title":"Installing Dependencies","slug":"installing-dependencies","link":"#installing-dependencies","children":[]},{"level":2,"title":"Creating a Container User","slug":"creating-a-container-user","link":"#creating-a-container-user","children":[]},{"level":2,"title":"Work Directory & Entrypoint","slug":"work-directory-entrypoint","link":"#work-directory-entrypoint","children":[]},{"level":2,"title":"Entrypoint Script","slug":"entrypoint-script","link":"#entrypoint-script","children":[]},{"level":2,"title":"Modifying the Startup Command","slug":"modifying-the-startup-command","link":"#modifying-the-startup-command","children":[]},{"level":2,"title":"Run the Command","slug":"run-the-command","link":"#run-the-command","children":[{"level":3,"title":"Note","slug":"note","link":"#note","children":[]}]}],"git":{"createdTime":1548912913000,"updatedTime":1713315474000,"contributors":[{"name":"Dane Everitt","email":"dane@daneeveritt.com","commits":3},{"name":"Jpac14","email":"45907459+Jpac14@users.noreply.github.com","commits":1},{"name":"LoYungSum","email":"sumsum_2003@yahoo.com.hk","commits":1},{"name":"Vukašin Lekić","email":"goksi1312@gmail.com","commits":1},{"name":"William Gladstone","email":"will.gl@dst.one","commits":1},{"name":"飒爽师叔","email":"43847794+vlssu@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.67,"words":801},"filePathRelative":"community/config/eggs/creating_a_custom_image.md","localizedDate":"2019年1月31日","autoDesc":true}');export{ie as comp,re as data};
